Section 8: Choreographing Microservices
 Lecture: Introduce
 
* Choreographing Microservices Introduce
  * 8.1 Understand deployment and scaling techniques
  * 8.2 Discover and register services with Eureka and Consul
  * 8.3 Route on the client with Ribbon
  * 8.4 Prevent failure cascades using Hystrix
  * 8.5 Isolate failures using circuit breakers
  * 8.6 Connect web client to backend services with Zull

* Understand how to build robust and failure-tolerant Microservices.
  * This section demonstrates:
    * how to handle service registration using Eureka (though Consul is also supported).
    * how to use Ribbon client-side load-balancing to dispatch calls in various ways using DiscoveryClient, using a blessed RestTemplate instance, and using the Feign & Spring MVC integration. Start everything up and then run PassportServiceApplication to see this working.
    * how to use Hystrix and the Hystrix dashboard to manage problematic service-to-service calls. You can see this in action by now disabling the PhotoServiceApplication (if youâ€™re in IntelliJ, remember to click the Exit button which is the fifth one down from the top left - an arrow pointing to a door, under the camera icon and not the Stop or Pause ones) and then re-running the PassportServiceApplication.
    * How to use Zuul to expose and aggregate backend microservices via an edge gateway.